#include "SAC.h"

using namespace std;

SAC_MethodXYZ::SAC_MethodXYZ() {
	coefficients = pcl::ModelCoefficients::Ptr(new pcl::ModelCoefficients);
	inliers = pcl::PointIndices::Ptr(new pcl::PointIndices);
}

pcl::PointIndices::Ptr SAC_MethodXYZ::applyRANSAC(
		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud, float distThreshold,
		float epsAngle, int axisVal) {

	seg.setOptimizeCoefficients(true);
	seg.setModelType(pcl::SACMODEL_PERPENDICULAR_PLANE);
	seg.setMethodType(pcl::SAC_RANSAC);
	seg.setDistanceThreshold(distThreshold);
	seg.setInputCloud(cloud->makeShared());

	if (axisVal == 0)
		axis = Eigen::Vector3f(1.0, 0.0, 0.0);
	else if (axisVal == 1)
		axis = Eigen::Vector3f(0.0, 1.0, 0.0);
	else
		axis = Eigen::Vector3f(0.0, 0.0, 1.0);
	seg.setAxis(axis);
	seg.setEpsAngle(pcl::deg2rad(epsAngle));

	seg.segment(*inliers, *coefficients); // segment floor
	if (inliers->indices.size() == 0) {
		std::cout << "Could not estimate a planar model for the given dataset.";
	}
	inPlane = new int[cloud->size()];
	std::memset(inPlane, 0, sizeof(inPlane));

	for (size_t i = 0; i < inliers->indices.size(); ++i) {
		inPlane[inliers->indices[i]] = 1;
	}

	/*
	 std::cout << "Model coefficients: " << coefficients->values[0] << " "
	 << coefficients->values[1] << " " << coefficients->values[2] << " "
	 << coefficients->values[3] << std::endl;
	 */

	return inliers;
}

void SAC_MethodXYZ::printPlane(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud) {
	std::cout << "Model inliers: " << inliers->indices.size() << std::endl;
	for (size_t i = 0; i < inliers->indices.size(); ++i)
		std::cout << inliers->indices[i] << "    "
				<< cloud->points[inliers->indices[i]].x << " "
				<< cloud->points[inliers->indices[i]].y << " "
				<< cloud->points[inliers->indices[i]].z << std::endl;
}

SAC_MethodXYZ::~SAC_MethodXYZ() {
}
